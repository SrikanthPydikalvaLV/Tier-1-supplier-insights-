import os
import re
import fitz  # PyMuPDF
import pytesseract
import pandas as pd
from PIL import Image, ImageOps
import cv2
import numpy as np
from shutil import move
from docx import Document
import aspose.words as aw  # For PDF to Word conversion

# Directories for valid and invalid reports
VALID_REPORTS_DIR = "Annual_report_files"
INVALID_REPORTS_DIR = "NON_Annual_report_files"
TEXT_OUTPUT_DIR = 'company_text_output'
EXCEL_OUTPUT_FILE = 'report_validation_output.xlsx'
CONVERTED_WORD_DIR = "converted_word_docs"

# Create directories if they don't exist
os.makedirs(VALID_REPORTS_DIR, exist_ok=True)
os.makedirs(INVALID_REPORTS_DIR, exist_ok=True)
os.makedirs(TEXT_OUTPUT_DIR, exist_ok=True)
os.makedirs(CONVERTED_WORD_DIR, exist_ok=True)

# Function to extract company name and year from the file name
def extract_details_from_filename(filename):
    pattern = r"(.*?)_annual report_(\d{4})\.pdf"
    match = re.match(pattern, filename)
    if match:
        company_name = match.group(1)
        year = match.group(2)
        return company_name, year
    else:
        return None, None

# Function to preprocess image for OCR
def preprocess_image_for_ocr(image):
    image = cv2.cvtColor(np.array(image), cv2.COLOR_RGB2BGR)
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Edge detection to remove logos and non-text elements
    edges = cv2.Canny(gray, 100, 200)

    # Find contours in the edge-detected image
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Remove small contours that could be logos or symbols
    mask = np.ones(gray.shape[:2], dtype="uint8") * 255
    for c in contours:
        if cv2.contourArea(c) < 1000:  # Arbitrarily chosen threshold to filter small shapes
            cv2.drawContours(mask, [c], -1, 0, -1)

    # Apply mask and enhance the contrast for OCR
    result = cv2.bitwise_and(gray, gray, mask=mask)
    return result

# Function to extract text from an image using OCR
def extract_text_from_image(image_path):
    img = Image.open(image_path)
    img = img.convert("L")  # Convert to grayscale
    img = ImageOps.invert(img)  # Invert colors if needed for better contrast
    preprocessed_image = preprocess_image_for_ocr(img)
    extracted_text = pytesseract.image_to_string(preprocessed_image)
    return extracted_text

# Function to extract text from all pages for PDF files
def extract_text_from_all_pages(pdf_path):
    doc = fitz.open(pdf_path)
    all_text = []  # To store text from all pages for company name validation
    keyword_text = []  # To store text for keyword validation (up to 20 pages)
    image_output_dir = "output_images"  # Directory to save images

    os.makedirs(image_output_dir, exist_ok=True)  # Create the directory for images if it doesn't exist

    for page_num in range(len(doc)):  # Loop over all pages
        page = doc.load_page(page_num)

        # Extract text using PyMuPDF
        pymupdf_text = page.get_text()
        all_text.append(pymupdf_text)

        # For OCR processing, limit to the first 20 pages for keywords
        if page_num < 20:
            # Convert the page to an image for OCR
            pix = page.get_pixmap()
            image_path = os.path.join(image_output_dir, f"page_{page_num + 1}.png")  # Save the image to the directory
            pix.save(image_path)

            # Extract text using OCR
            ocr_text = extract_text_from_image(image_path)
            keyword_text.append(f"Page {page_num + 1} - OCR:\n{ocr_text}\n")

    return "\n".join(all_text), "\n".join(keyword_text)

# Function to convert PDF to Word and extract text from the Word document
def convert_pdf_to_word(pdf_path, word_output_path):
    doc = aw.Document(pdf_path)
    doc.save(word_output_path)
    return extract_text_from_word(word_output_path)

# Function to read Word document and extract text
def extract_text_from_word(docx_path):
    doc = Document(docx_path)
    return "\n".join([para.text for para in doc.paragraphs])

# Enhanced validation function with debugging output
def validate_extracted_text(company_text, keyword_text, company_name, year):
    valid_report_keywords = [
        f"{year} annual report",
        f"annual report {year}",
        f"{year} annual results",
        f"annual results {year}",
        f"integrated report {year}",
        "integrated report",
        "consolidated report",
        f"consolidated report {year}",
        "10-K",
        "10-K report",
        "form 10-K"
    ]
    invalid_report_keywords = [
        "esg report",
        "sustainability report",
        "corporate responsibility report"
    ]

    # Split the company name into words for flexible matching
    partial_company_name_words = re.split(r'\s+', company_name.lower())
    company_text_lower = company_text.lower()
    keyword_text_lower = keyword_text.lower()

    print(f"Checking company name '{company_name}' in extracted text...")  # Debug logging

    # 1. Check for partial company name match
    company_name_found = any(word in company_text_lower for word in partial_company_name_words)
    print(f"Company name found: {company_name_found}")  # Debug logging
    
    if not company_name_found:
        return False, "Partial company name not found in the text", "Company Name Not Matched", "N/A", "N/A"

    # 2. Check for valid report type and year together
    valid_report_type = None
    year_found = year in keyword_text_lower  # Check if the year is mentioned
    print(f"Year '{year}' found in extracted text: {year_found}")  # Debug logging

    # Normalize keyword_text_lower to avoid issues with special characters
    normalized_keyword_text = re.sub(r'[^a-zA-Z0-9\s]', ' ', keyword_text_lower)  # Replace special characters with space
    year_around_report = re.search(r'annual report\s*[\W]*' + re.escape(year) + r'|' + re.escape(year) + r'[\W]*annual report', normalized_keyword_text)

    print(f"Year and report type found close together: {year_around_report is not None}")  # Debug logging

    # Check for the valid report type
    for keyword in valid_report_keywords:
        if re.search(r'\b' + re.escape(keyword) + r'\b', normalized_keyword_text):
            valid_report_type = keyword
            break

    print(f"Valid report type found: {valid_report_type}")  # Debug logging

    # Reasoning based on findings
    if not valid_report_type and year_found and year_around_report:
        return False, "Year matched but report type not found", "Company Name Matched", "Report Type Not Matched", "Year Matched"
    elif valid_report_type and not year_found:
        return False, "Report type matched but year not found", "Company Name Matched", "Report Type Matched", "Year Not Matched"
    elif not valid_report_type and not year_found:
        return False, "Neither report type nor year matched", "Company Name Matched", "Report Type Not Matched", "Year Not Matched"

    # 3. Check for invalid report types in the keyword text
    for invalid_keyword in invalid_report_keywords:
        if re.search(r'\b' + re.escape(invalid_keyword) + r'\b', normalized_keyword_text):
            return False, f"Invalid report type found: {invalid_keyword}", "Company Name Matched", "Report Type Matched", "Invalid Report Type Found"

    return True, f"Valid {valid_report_type}", "Company Name Matched", "Report Type Matched", "Year Matched"

# Function to scan all PDF files in a folder and validate them using two methods
def scan_pdfs_in_folder(folder_path):
    results = []

    for filename in os.listdir(folder_path):
        if filename.endswith('.pdf'):
            company_name, year = extract_details_from_filename(filename)
            if not company_name or not year:
                print(f"Skipping file '{filename}' due to incorrect naming convention.")
                continue

            pdf_path = os.path.join(folder_path, filename)
            print(f"Processing '{filename}' for company '{company_name}' and year '{year}'.")

            # Step 1: Extract and validate using first method (PyMuPDF + OCR)
            company_text, keyword_text = extract_text_from_all_pages(pdf_path)

            # Save the extracted text to a file named as "company_name_extracted_text.txt"
            output_file = os.path.join(TEXT_OUTPUT_DIR, f"{company_name}_extracted_text.txt")
            with open(output_file, 'w', encoding='utf-8') as company_output:
                company_output.write(f"Company Name: {company_name}\n\n")
                company_output.write(f"Extracted Text:\n{company_text}\n\n{keyword_text}\n")

            # Step 2: Convert to Word and validate using second method (Word Document)
            word_output_path = os.path.join(CONVERTED_WORD_DIR, filename.replace('.pdf', '.docx'))
            convert_pdf_to_word(pdf_path, word_output_path)
            word_text = extract_text_from_word(word_output_path)

            # Validate using both extracted texts
            valid_1, reason_1, company_status_1, report_status_1, year_status_1 = validate_extracted_text(company_text, keyword_text, company_name, year)
            valid_2, reason_2, company_status_2, report_status_2, year_status_2 = validate_extracted_text(word_text, word_text, company_name, year)

            # Determine final validity and result
            is_valid = valid_1 or valid_2
            final_reason = reason_1 if valid_1 else reason_2

            # Save results to a list
            results.append({
                'Filename': filename,
                'Company Name': company_name,
                'Year': year,
                'Valid': is_valid,
                'Validation Reason': final_reason,
                'Method 1 (Company Status)': company_status_1,
                'Method 1 (Report Status)': report_status_1,
                'Method 1 (Year Status)': year_status_1,
                'Method 2 (Company Status)': company_status_2,
                'Method 2 (Report Status)': report_status_2,
                'Method 2 (Year Status)': year_status_2
            })

            # Move the file based on validation result
            if is_valid:
                move(pdf_path, os.path.join(VALID_REPORTS_DIR, filename))
            else:
                move(pdf_path, os.path.join(INVALID_REPORTS_DIR, filename))

    # Save results to Excel
    df = pd.DataFrame(results)
    df.to_excel(EXCEL_OUTPUT_FILE, index=False)
    print(f"Validation complete. Results saved to '{EXCEL_OUTPUT_FILE}'.")

# Example usage: scan_pdfs_in_folder("path_to_your_pdf_folder")
# Path to folder containing the PDF files
folder_path = r"input_file"

# Scan the folder and validate the reports
scan_pdfs_in_folder(folder_path)